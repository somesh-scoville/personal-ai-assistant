services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  fastapi-backend:
    build: .
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./:/app
    environment:
      PYTHONPATH: /app
      SERVICE_HOST: "0.0.0.0"
      SERVICE_PORT: 8080
      DEV: "true"
      # GROQ Configuration
      GROQ_API_KEY: ${GROQ_API_KEY}
      # LangSmith Configuration
      LANGSMITH_TRACING: "true"
      LANGSMITH_PROJECT: ${LANGSMITH_PROJECT}
      LANGSMITH_API_KEY: ${LANGSMITH_API_KEY}
      # PostgreSQL Configuration
      POSTGRES_USER: ${POSTGRES_USER
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: "5432"
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_APPLICATION_NAME: "personal-ai-assistant-app"
      POSTGRES_MIN_CONNECTIONS_PER_POOL: 1
      POSTGRES_MAX_CONNECTIONS_PER_POOL: 1
      # MongoDB Configuration
      MONGO_URI: ${MONGO_URI}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
      MONGO_AUTH_SOURCE: ${MONGO_AUTH_SOURCE}
      MONGO_STATE_CHECKPOINT_COLLECTION: state_checkpoints
      MONGO_STATE_WRITES_COLLECTION: state_writes
      MONGO_STATE_STORE_COLLECTION: state_store
    ports:
      - "8080:8080"
    command:
      [
        "uv",
        "run",
        "python",
        "-m",
        "uvicorn",
        "service.service:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8080",
        "--reload",
      ]

volumes:
  pgdata:
